version: '3.8'

services:
  # XAI Main Application
  xai-app:
    build:
      context: ../../
      dockerfile: deployment/xai/docker/Dockerfile.xai
      target: production
    container_name: xai-trading-system
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - XAI_REDIS_URL=redis://redis:6379
      - XAI_POSTGRES_URL=postgresql://xai_user:${XAI_DB_PASSWORD}@postgres:5432/xai_trading
      - XAI_OLLAMA_URL=http://ollama:11434
      - XAI_PROMETHEUS_URL=http://prometheus:9090
      - XAI_LOG_LEVEL=info
      - XAI_API_HOST=0.0.0.0
      - XAI_API_PORT=8000
      - XAI_MAX_EXPLANATION_LATENCY_MS=100
      - XAI_QUERY_TIMEOUT_MS=2000
    volumes:
      - xai_data:/app/data
      - xai_logs:/app/logs
      - xai_models:/app/models
    networks:
      - xai-network
    depends_on:
      - redis
      - postgres
      - ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Nginx Reverse Proxy with SSL
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: xai-nginx
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    environment:
      - XAI_DOMAIN=${XAI_DOMAIN:-localhost}
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - xai-network
    depends_on:
      - xai-app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis for Caching and Sessions
  redis:
    image: redis:7.2-alpine
    container_name: xai-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - xai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:15.5-alpine
    container_name: xai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=xai_trading
      - POSTGRES_USER=xai_user
      - POSTGRES_PASSWORD=${XAI_DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - xai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xai_user -d xai_trading"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Ollama LLM Engine
  ollama:
    image: ollama/ollama:latest
    container_name: xai-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MODELS=phi3:3.8b-mini-instruct-4k-fp16
    networks:
      - xai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: xai-chromadb
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_DB_IMPL=clickhouse
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - xai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: xai-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - xai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.2.3
    container_name: xai-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - xai-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: xai-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=xai-elasticsearch
      - cluster.name=xai-logging-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - xai-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.1
    container_name: xai-logstash
    restart: unless-stopped
    volumes:
      - ./logging/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logging/logstash/config:/usr/share/logstash/config:ro
      - xai_logs:/var/log/xai:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - xai-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600/_node/stats || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: xai-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=xai-kibana
      - SERVER_HOST=0.0.0.0
    networks:
      - xai-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  xai_data:
    driver: local
  xai_logs:
    driver: local
  xai_models:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  chromadb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  xai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16