name: Multi-Environment Deployment Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'k8s/**'
      - 'config/**'
      - 'requirements*.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deployment_strategy:
        description: 'Deployment Strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment (skip safety checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_ENV: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'development' }}
  DEPLOYMENT_STRATEGY: ${{ github.event.inputs.deployment_strategy || 'rolling' }}
  SKIP_TESTS: ${{ github.event.inputs.skip_tests || 'false' }}
  FORCE_DEPLOY: ${{ github.event.inputs.force_deploy || 'false' }}

jobs:
  environment-setup:
    name: Environment Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setup.outputs.environment }}
      deployment-strategy: ${{ steps.setup.outputs.strategy }}
      registry-url: ${{ steps.setup.outputs.registry }}
      image-tag: ${{ steps.setup.outputs.tag }}
      deploy-enabled: ${{ steps.safety.outputs.enabled }}
      configuration: ${{ steps.config.outputs.data }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Environment setup
        id: setup
        run: |
          echo "environment=${{ env.DEPLOYMENT_ENV }}" >> $GITHUB_OUTPUT
          echo "strategy=${{ env.DEPLOYMENT_STRATEGY }}" >> $GITHUB_OUTPUT
          echo "registry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "tag=${{ env.DEPLOYMENT_ENV }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          
          echo "🚀 Deployment Configuration:"
          echo "Environment: ${{ env.DEPLOYMENT_ENV }}"
          echo "Strategy: ${{ env.DEPLOYMENT_STRATEGY }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"

      - name: Safety checks
        id: safety
        run: |
          DEPLOY_ENABLED="true"
          
          # Production safety checks
          if [ "${{ env.DEPLOYMENT_ENV }}" = "production" ]; then
            if [ "${{ github.ref_name }}" != "main" ]; then
              echo "❌ Production deployment only allowed from main branch"
              DEPLOY_ENABLED="false"
            fi
            
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "❌ Production deployment not allowed from pull requests"
              DEPLOY_ENABLED="false"
            fi
          fi
          
          # Force deployment override
          if [ "${{ env.FORCE_DEPLOY }}" = "true" ]; then
            echo "⚠️ Force deployment enabled - bypassing safety checks"
            DEPLOY_ENABLED="true"
          fi
          
          echo "enabled=$DEPLOY_ENABLED" >> $GITHUB_OUTPUT
          echo "Deploy enabled: $DEPLOY_ENABLED"

      - name: Load environment configuration
        id: config
        run: |
          CONFIG_FILE="config/environments/${{ env.DEPLOYMENT_ENV }}.yaml"
          
          if [ -f "$CONFIG_FILE" ]; then
            echo "✅ Configuration found: $CONFIG_FILE"
            # Convert YAML to JSON for easier processing
            pip install pyyaml
            python3 -c "
            import yaml, json
            with open('$CONFIG_FILE', 'r') as f:
                data = yaml.safe_load(f)
            print(json.dumps(data))
            " > env-config.json
            
            CONFIG_DATA=$(cat env-config.json)
            echo "data=$CONFIG_DATA" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Configuration file not found: $CONFIG_FILE"
            echo "data={}" >> $GITHUB_OUTPUT
          fi

      - name: Upload environment configuration
        uses: actions/upload-artifact@v4
        with:
          name: environment-config-${{ env.DEPLOYMENT_ENV }}
          path: env-config.json
          retention-days: 7

  build-and-test:
    name: Build & Test Pipeline
    runs-on: ubuntu-latest
    needs: environment-setup
    if: needs.environment-setup.outputs.deploy-enabled == 'true'
    strategy:
      matrix:
        component: [strategic-agent, tactical-agent, risk-agent]
        architecture: [linux/amd64, linux/arm64]
      fail-fast: false
      max-parallel: 6
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.architecture }}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.environment-setup.outputs.registry-url }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ needs.environment-setup.outputs.environment }}-
            type=raw,value=${{ needs.environment-setup.outputs.image-tag }}-${{ matrix.component }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.production
          target: ${{ matrix.component }}
          platforms: ${{ matrix.architecture }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.component }}-${{ matrix.architecture }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}-${{ matrix.architecture }}
          build-args: |
            ENVIRONMENT=${{ needs.environment-setup.outputs.environment }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            COMPONENT=${{ matrix.component }}

      - name: Run component tests
        if: env.SKIP_TESTS != 'true'
        run: |
          echo "🧪 Running tests for ${{ matrix.component }}..."
          
          # Set up test environment
          docker network create test-network || true
          
          # Run component-specific tests
          docker run --rm --network test-network \
            -e ENVIRONMENT=test \
            -e COMPONENT=${{ matrix.component }} \
            ${{ steps.meta.outputs.tags }} \
            python -m pytest tests/${{ matrix.component }}/ -v --timeout=300
          
          # Cleanup
          docker network rm test-network || true

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}-${{ matrix.architecture }}.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}-${{ matrix.architecture }}.sarif'
          category: 'container-${{ matrix.component }}-${{ matrix.architecture }}'
        if: always()

  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [environment-setup, build-and-test]
    if: needs.environment-setup.outputs.deploy-enabled == 'true' && env.SKIP_TESTS != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          echo "🔧 Setting up integration test environment..."
          
          # Create test network
          docker network create grandmodel-test-network
          
          # Start Redis for testing
          docker run -d --name test-redis --network grandmodel-test-network redis:7-alpine
          
          # Start PostgreSQL for testing
          docker run -d --name test-postgres --network grandmodel-test-network \
            -e POSTGRES_DB=grandmodel_test \
            -e POSTGRES_USER=test \
            -e POSTGRES_PASSWORD=test \
            postgres:15-alpine

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests..."
          
          # Pull all component images
          docker pull ${{ needs.environment-setup.outputs.registry-url }}-strategic-agent:${{ needs.environment-setup.outputs.image-tag }}-strategic-agent
          docker pull ${{ needs.environment-setup.outputs.registry-url }}-tactical-agent:${{ needs.environment-setup.outputs.image-tag }}-tactical-agent
          docker pull ${{ needs.environment-setup.outputs.registry-url }}-risk-agent:${{ needs.environment-setup.outputs.image-tag }}-risk-agent
          
          # Start all components
          docker run -d --name strategic-agent --network grandmodel-test-network \
            -e ENVIRONMENT=test \
            -e REDIS_URL=redis://test-redis:6379 \
            -e DATABASE_URL=postgresql://test:test@test-postgres:5432/grandmodel_test \
            ${{ needs.environment-setup.outputs.registry-url }}-strategic-agent:${{ needs.environment-setup.outputs.image-tag }}-strategic-agent
          
          docker run -d --name tactical-agent --network grandmodel-test-network \
            -e ENVIRONMENT=test \
            -e REDIS_URL=redis://test-redis:6379 \
            -e DATABASE_URL=postgresql://test:test@test-postgres:5432/grandmodel_test \
            ${{ needs.environment-setup.outputs.registry-url }}-tactical-agent:${{ needs.environment-setup.outputs.image-tag }}-tactical-agent
          
          docker run -d --name risk-agent --network grandmodel-test-network \
            -e ENVIRONMENT=test \
            -e REDIS_URL=redis://test-redis:6379 \
            -e DATABASE_URL=postgresql://test:test@test-postgres:5432/grandmodel_test \
            ${{ needs.environment-setup.outputs.registry-url }}-risk-agent:${{ needs.environment-setup.outputs.image-tag }}-risk-agent
          
          # Wait for services to start
          sleep 30
          
          # Run integration tests
          docker run --rm --network grandmodel-test-network \
            -e STRATEGIC_ENDPOINT=http://strategic-agent:8000 \
            -e TACTICAL_ENDPOINT=http://tactical-agent:8000 \
            -e RISK_ENDPOINT=http://risk-agent:8000 \
            -v $(pwd)/tests:/app/tests \
            ${{ needs.environment-setup.outputs.registry-url }}-strategic-agent:${{ needs.environment-setup.outputs.image-tag }}-strategic-agent \
            python -m pytest tests/integration/ -v --timeout=600 --junit-xml=/app/integration-results.xml

      - name: Cleanup test environment
        if: always()
        run: |
          echo "🧹 Cleaning up test environment..."
          docker stop strategic-agent tactical-agent risk-agent test-redis test-postgres || true
          docker rm strategic-agent tactical-agent risk-agent test-redis test-postgres || true
          docker network rm grandmodel-test-network || true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: integration-results.xml
          retention-days: 30

  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [environment-setup, build-and-test]
    if: needs.environment-setup.outputs.deploy-enabled == 'true' && needs.environment-setup.outputs.environment != 'development'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Performance benchmarking
        run: |
          echo "📊 Running performance benchmarks..."
          
          # Start performance test environment
          docker network create perf-test-network
          
          # Run performance tests
          docker run --rm --network perf-test-network \
            -e ENVIRONMENT=performance \
            -e PERFORMANCE_TARGET_MS=5 \
            -e LOAD_TEST_DURATION=300 \
            -v $(pwd)/performance-results:/app/performance-results \
            ${{ needs.environment-setup.outputs.registry-url }}-strategic-agent:${{ needs.environment-setup.outputs.image-tag }}-strategic-agent \
            python tests/performance/test_inference_performance_validation.py

      - name: Performance gate validation
        run: |
          echo "🚪 Validating performance gates..."
          
          # Check if performance results meet requirements
          if [ -f "performance-results/performance-report.json" ]; then
            MEAN_LATENCY=$(jq -r '.mean_latency_ms' performance-results/performance-report.json)
            P95_LATENCY=$(jq -r '.p95_latency_ms' performance-results/performance-report.json)
            
            echo "Mean latency: ${MEAN_LATENCY}ms"
            echo "P95 latency: ${P95_LATENCY}ms"
            
            if (( $(echo "$MEAN_LATENCY > 5.0" | bc -l) )); then
              echo "❌ Performance gate failed: Mean latency ${MEAN_LATENCY}ms > 5.0ms"
              exit 1
            fi
            
            if (( $(echo "$P95_LATENCY > 10.0" | bc -l) )); then
              echo "❌ Performance gate failed: P95 latency ${P95_LATENCY}ms > 10.0ms"
              exit 1
            fi
            
            echo "✅ Performance gates passed"
          else
            echo "⚠️ Performance results not found, skipping validation"
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-validation-results
          path: performance-results/
          retention-days: 30

  deploy-to-environment:
    name: Deploy to ${{ needs.environment-setup.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [environment-setup, build-and-test, integration-tests, performance-validation]
    if: always() && needs.environment-setup.outputs.deploy-enabled == 'true' && !failure()
    environment: ${{ needs.environment-setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "🔧 Configuring kubectl for ${{ needs.environment-setup.outputs.environment }}..."
          
          # Configure kubectl based on environment
          case "${{ needs.environment-setup.outputs.environment }}" in
            "development")
              echo "Configuring for development environment"
              # kubectl config would be configured here
              ;;
            "staging")
              echo "Configuring for staging environment"
              # kubectl config would be configured here
              ;;
            "production")
              echo "Configuring for production environment"
              # kubectl config would be configured here
              ;;
          esac

      - name: Update deployment manifests
        run: |
          echo "📝 Updating deployment manifests..."
          
          # Update image tags in Kubernetes manifests
          sed -i "s|image: .*strategic-agent:.*|image: ${{ needs.environment-setup.outputs.registry-url }}-strategic-agent:${{ needs.environment-setup.outputs.image-tag }}-strategic-agent|g" k8s/deployments.yaml
          sed -i "s|image: .*tactical-agent:.*|image: ${{ needs.environment-setup.outputs.registry-url }}-tactical-agent:${{ needs.environment-setup.outputs.image-tag }}-tactical-agent|g" k8s/deployments.yaml
          sed -i "s|image: .*risk-agent:.*|image: ${{ needs.environment-setup.outputs.registry-url }}-risk-agent:${{ needs.environment-setup.outputs.image-tag }}-risk-agent|g" k8s/deployments.yaml
          
          # Update environment-specific configuration
          sed -i "s|namespace: .*|namespace: grandmodel-${{ needs.environment-setup.outputs.environment }}|g" k8s/namespace.yaml

      - name: Deploy using ${{ needs.environment-setup.outputs.deployment-strategy }} strategy
        run: |
          echo "🚀 Deploying using ${{ needs.environment-setup.outputs.deployment-strategy }} strategy..."
          
          case "${{ needs.environment-setup.outputs.deployment-strategy }}" in
            "rolling")
              echo "Executing rolling deployment..."
              kubectl apply -f k8s/namespace.yaml
              kubectl apply -f k8s/configmaps.yaml
              kubectl apply -f k8s/deployments.yaml
              kubectl apply -f k8s/services.yaml
              kubectl apply -f k8s/hpa.yaml
              kubectl rollout status deployment/strategic-agent -n grandmodel-${{ needs.environment-setup.outputs.environment }}
              kubectl rollout status deployment/tactical-agent -n grandmodel-${{ needs.environment-setup.outputs.environment }}
              kubectl rollout status deployment/risk-agent -n grandmodel-${{ needs.environment-setup.outputs.environment }}
              ;;
            "blue-green")
              echo "Executing blue-green deployment..."
              # Blue-green deployment logic would be implemented here
              echo "Blue-green deployment strategy not fully implemented yet"
              ;;
            "canary")
              echo "Executing canary deployment..."
              # Canary deployment logic would be implemented here
              echo "Canary deployment strategy not fully implemented yet"
              ;;
          esac

      - name: Deployment verification
        run: |
          echo "✅ Verifying deployment..."
          
          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/strategic-agent -n grandmodel-${{ needs.environment-setup.outputs.environment }}
          kubectl wait --for=condition=available --timeout=300s deployment/tactical-agent -n grandmodel-${{ needs.environment-setup.outputs.environment }}
          kubectl wait --for=condition=available --timeout=300s deployment/risk-agent -n grandmodel-${{ needs.environment-setup.outputs.environment }}
          
          # Run health checks
          kubectl get pods -n grandmodel-${{ needs.environment-setup.outputs.environment }}
          kubectl get services -n grandmodel-${{ needs.environment-setup.outputs.environment }}
          
          echo "✅ Deployment verification completed"

      - name: Post-deployment monitoring setup
        if: needs.environment-setup.outputs.environment == 'production'
        run: |
          echo "📊 Setting up post-deployment monitoring..."
          
          # Enable enhanced monitoring for production
          kubectl apply -f k8s/production-monitoring.yaml
          
          # Configure alerts
          echo "Enhanced monitoring and alerting configured for production deployment"

  rollback-capability:
    name: Rollback Capability Setup
    runs-on: ubuntu-latest
    needs: [environment-setup, deploy-to-environment]
    if: always() && needs.deploy-to-environment.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Store rollback information
        run: |
          echo "💾 Storing rollback information..."
          
          # Create rollback manifest
          cat > rollback-info.json << EOF
          {
            "environment": "${{ needs.environment-setup.outputs.environment }}",
            "deployment_strategy": "${{ needs.environment-setup.outputs.deployment-strategy }}",
            "image_tag": "${{ needs.environment-setup.outputs.image-tag }}",
            "commit_sha": "${{ github.sha }}",
            "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "rollback_command": "kubectl rollout undo deployment/strategic-agent -n grandmodel-${{ needs.environment-setup.outputs.environment }}",
            "images": {
              "strategic-agent": "${{ needs.environment-setup.outputs.registry-url }}-strategic-agent:${{ needs.environment-setup.outputs.image-tag }}-strategic-agent",
              "tactical-agent": "${{ needs.environment-setup.outputs.registry-url }}-tactical-agent:${{ needs.environment-setup.outputs.image-tag }}-tactical-agent",
              "risk-agent": "${{ needs.environment-setup.outputs.registry-url }}-risk-agent:${{ needs.environment-setup.outputs.image-tag }}-risk-agent"
            }
          }
          EOF

      - name: Upload rollback information
        uses: actions/upload-artifact@v4
        with:
          name: rollback-info-${{ needs.environment-setup.outputs.environment }}-${{ github.sha }}
          path: rollback-info.json
          retention-days: 90

  deployment-report:
    name: Deployment Report
    runs-on: ubuntu-latest
    needs: [environment-setup, deploy-to-environment, rollback-capability]
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "# Deployment Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "## Deployment Summary" >> deployment-report.md
          echo "- **Environment**: ${{ needs.environment-setup.outputs.environment }}" >> deployment-report.md
          echo "- **Strategy**: ${{ needs.environment-setup.outputs.deployment-strategy }}" >> deployment-report.md
          echo "- **Image Tag**: ${{ needs.environment-setup.outputs.image-tag }}" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Deployment Time**: $(date -u)" >> deployment-report.md
          echo "" >> deployment-report.md
          
          echo "## Deployment Results" >> deployment-report.md
          echo "- **Environment Setup**: ${{ needs.environment-setup.result }}" >> deployment-report.md
          echo "- **Build & Test**: ${{ needs.build-and-test.result }}" >> deployment-report.md
          echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> deployment-report.md
          echo "- **Performance Validation**: ${{ needs.performance-validation.result }}" >> deployment-report.md
          echo "- **Deployment**: ${{ needs.deploy-to-environment.result }}" >> deployment-report.md
          echo "- **Rollback Setup**: ${{ needs.rollback-capability.result }}" >> deployment-report.md
          echo "" >> deployment-report.md
          
          # Overall status
          if [ "${{ needs.deploy-to-environment.result }}" = "success" ]; then
            echo "## ✅ Deployment Successful" >> deployment-report.md
            echo "The deployment to ${{ needs.environment-setup.outputs.environment }} completed successfully." >> deployment-report.md
          else
            echo "## ❌ Deployment Failed" >> deployment-report.md
            echo "The deployment to ${{ needs.environment-setup.outputs.environment }} failed." >> deployment-report.md
          fi

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ needs.environment-setup.outputs.environment }}-${{ github.sha }}
          path: deployment-report.md
          retention-days: 90

      - name: Deployment notification
        if: always()
        run: |
          STATUS="${{ needs.deploy-to-environment.result }}"
          if [ "$STATUS" = "success" ]; then
            echo "✅ Deployment to ${{ needs.environment-setup.outputs.environment }} successful"
            EMOJI="🎉"
          else
            echo "❌ Deployment to ${{ needs.environment-setup.outputs.environment }} failed"
            EMOJI="🚨"
          fi
          
          echo "$EMOJI Multi-Environment Deployment Pipeline completed"
          echo "Environment: ${{ needs.environment-setup.outputs.environment }}"
          echo "Strategy: ${{ needs.environment-setup.outputs.deployment-strategy }}"
          echo "Status: $STATUS"
          
          # This would send notifications to Slack/Teams in real implementation
          echo "Deployment notification sent"