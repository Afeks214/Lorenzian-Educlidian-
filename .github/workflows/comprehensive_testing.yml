name: Comprehensive Testing & Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.5.1'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run unit tests
      run: |
        pytest tests/test_comprehensive_coverage.py::TestCoreSystemComponents \
               tests/test_comprehensive_coverage.py::TestRiskManagementSystem \
               -v --tb=short --maxfail=5 \
               --cov=src \
               --cov-report=xml:coverage-unit.xml \
               --cov-report=html:htmlcov-unit \
               --junit-xml=junit-unit.xml
    
    - name: Upload unit test coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage-unit.xml
        flags: unit
        name: unit-tests
    
    - name: Archive unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          junit-unit.xml
          htmlcov-unit/
          coverage-unit.xml

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: grandmodel_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run integration tests
      env:
        REDIS_URL: redis://localhost:6379/0
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/grandmodel_test
      run: |
        pytest tests/test_comprehensive_coverage.py::TestSystemIntegration \
               tests/test_agent_coordination.py::TestAgentCoordination \
               tests/test_agent_coordination.py::TestCoordinationScenarios \
               -v --tb=short --maxfail=10 \
               --cov=src \
               --cov-report=xml:coverage-integration.xml \
               --cov-report=html:htmlcov-integration \
               --junit-xml=junit-integration.xml
    
    - name: Upload integration test coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage-integration.xml
        flags: integration
        name: integration-tests
    
    - name: Archive integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          junit-integration.xml
          htmlcov-integration/
          coverage-integration.xml

  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run performance tests
      run: |
        pytest tests/test_comprehensive_coverage.py::TestPerformanceRequirements \
               tests/test_load_testing.py::TestHighFrequencyDataProcessing \
               tests/test_load_testing.py::TestOrderProcessingLoad \
               tests/test_load_testing.py::TestRiskCalculationLoad \
               -v --tb=short --maxfail=5 \
               --benchmark-only \
               --benchmark-json=benchmark-results.json \
               --junit-xml=junit-performance.xml
    
    - name: Archive performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          junit-performance.xml
          benchmark-results.json

  load-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: performance-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run load tests
      run: |
        pytest tests/test_load_testing.py::TestSystemIntegrationLoad \
               tests/test_agent_coordination.py::TestCoordinationPerformance \
               -v --tb=short --maxfail=3 \
               --timeout=300 \
               --junit-xml=junit-load.xml
    
    - name: Archive load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: junit-load.xml

  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run security tests
      run: |
        pytest tests/test_security_validation.py \
               -v --tb=short --maxfail=5 \
               --junit-xml=junit-security.xml
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt -o bandit-report.txt || true
    
    - name: Run Safety vulnerability scan
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
    
    - name: Archive security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          junit-security.xml
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt

  regression-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run regression tests
      run: |
        pytest tests/test_comprehensive_coverage.py::TestRegressionSuite \
               -v --tb=short --maxfail=5 \
               --junit-xml=junit-regression.xml
    
    - name: Archive regression test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-test-results
        path: junit-regression.xml

  test-coverage-report:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run comprehensive coverage analysis
      run: |
        pytest tests/ \
               --cov=src \
               --cov-report=xml:coverage-comprehensive.xml \
               --cov-report=html:htmlcov-comprehensive \
               --cov-report=term-missing \
               --cov-fail-under=85 \
               --junit-xml=junit-comprehensive.xml
    
    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage-badge.svg
    
    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage-comprehensive.xml
        flags: comprehensive
        name: comprehensive-coverage
    
    - name: Archive comprehensive coverage results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-coverage-results
        path: |
          junit-comprehensive.xml
          htmlcov-comprehensive/
          coverage-comprehensive.xml
          coverage-badge.svg

  quality-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Configure Poetry
      run: poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: |
        poetry install --with dev,test
        pip install -r requirements-test.txt
    
    - name: Run Black code formatting check
      run: black --check --diff src/ tests/
    
    - name: Run isort import sorting check
      run: isort --check-only --diff src/ tests/
    
    - name: Run flake8 linting
      run: flake8 src/ tests/ --statistics --tee --output-file=flake8-report.txt
    
    - name: Run mypy type checking
      run: mypy src/ --install-types --non-interactive --junit-xml=mypy-report.xml
    
    - name: Run pylint analysis
      run: pylint src/ --output-format=json > pylint-report.json || true
    
    - name: Archive quality check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-check-results
        path: |
          flake8-report.txt
          mypy-report.xml
          pylint-report.json

  test-report:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests, performance-tests, load-tests, security-tests, regression-tests, test-coverage-report]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate comprehensive test report
      run: |
        python scripts/generate_test_report.py \
          --unit-results unit-test-results/junit-unit.xml \
          --integration-results integration-test-results/junit-integration.xml \
          --performance-results performance-test-results/junit-performance.xml \
          --load-results load-test-results/junit-load.xml \
          --security-results security-test-results/junit-security.xml \
          --regression-results regression-test-results/junit-regression.xml \
          --coverage-results comprehensive-coverage-results/coverage-comprehensive.xml \
          --output comprehensive-test-report.html
    
    - name: Upload comprehensive test report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: comprehensive-test-report.html
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results summary
          const reportPath = 'comprehensive-test-report.html';
          if (fs.existsSync(reportPath)) {
            const report = fs.readFileSync(reportPath, 'utf8');
            
            const comment = `
            ## 🧪 Comprehensive Test Results
            
            The comprehensive test suite has completed. Here's a summary:
            
            - ✅ **Unit Tests**: Core system components
            - ✅ **Integration Tests**: Agent coordination and system integration
            - ✅ **Performance Tests**: High-frequency trading requirements
            - ✅ **Load Tests**: System scalability and throughput
            - ✅ **Security Tests**: Vulnerability detection and validation
            - ✅ **Regression Tests**: Backward compatibility
            
            📊 **Coverage**: Target 95% (see detailed report in artifacts)
            
            Full test report available in the workflow artifacts.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  deployment-readiness:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-report]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download test report
      uses: actions/download-artifact@v3
      with:
        name: comprehensive-test-report
    
    - name: Check deployment readiness
      run: |
        echo "✅ All tests passed"
        echo "✅ Coverage requirements met"
        echo "✅ Security validation passed"
        echo "✅ Performance requirements met"
        echo "🚀 System ready for deployment"
    
    - name: Create deployment tag
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "deployment-$(date +%Y%m%d-%H%M%S)" -m "Deployment ready: All tests passed"
        git push origin --tags