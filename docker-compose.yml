# GrandModel Docker Compose Configuration
# AGENT 5 - Configuration Recovery Mission
# Complete system deployment with all services

version: '3.8'

services:
  # Redis Service for Event Bus and Caching
  redis:
    image: redis:7-alpine
    container_name: grandmodel_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./configs/redis/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - grandmodel_network
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: grandmodel_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=${DB_NAME:-grandmodel}
      - POSTGRES_USER=${DB_USERNAME:-grandmodel_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-grandmodel_user}"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - grandmodel_network
      
  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: grandmodel_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - grandmodel_network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
          
  # GrandModel Main Application
  grandmodel:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: grandmodel_app
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./configs:/app/configs:ro
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-grandmodel}
      - DB_USERNAME=${DB_USERNAME:-grandmodel_user}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:?JWT_SECRET_KEY environment variable is required}
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - grandmodel_network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'
          
  # Strategic MARL Agent Service
  strategic_agent:
    build:
      context: .
      dockerfile: docker/tactical.Dockerfile
      target: production
    container_name: grandmodel_strategic
    restart: unless-stopped
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    environment:
      - AGENT_TYPE=strategic
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_PATH=/app/models/strategic
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      grandmodel:
        condition: service_healthy
    networks:
      - grandmodel_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
          
  # Tactical MARL Agent Service  
  tactical_agent:
    build:
      context: .
      dockerfile: docker/tactical.Dockerfile
      target: production
    container_name: grandmodel_tactical
    restart: unless-stopped
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    environment:
      - AGENT_TYPE=tactical
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_PATH=/app/models/tactical
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      grandmodel:
        condition: service_healthy
    networks:
      - grandmodel_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
          
  # Risk Management Agent Service
  risk_agent:
    build:
      context: .
      dockerfile: docker/tactical.Dockerfile
      target: production
    container_name: grandmodel_risk
    restart: unless-stopped
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    environment:
      - AGENT_TYPE=risk
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_PATH=/app/models/risk
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      grandmodel:
        condition: service_healthy
    networks:
      - grandmodel_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
          
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: grandmodel_prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./configs/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - grandmodel_network
      
  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grandmodel_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:?GRAFANA_PASSWORD environment variable is required}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - grandmodel_network
      
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: grandmodel_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - grandmodel
      - grafana
    networks:
      - grandmodel_network
      
  # Development Services (only for development)
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: grandmodel_jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-grandmodel}
    profiles:
      - development
    networks:
      - grandmodel_network

# Network Configuration
networks:
  grandmodel_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume Configuration
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Environment File Template
# Create a .env file with these variables:
# DB_NAME=grandmodel
# DB_USERNAME=grandmodel_user
# DB_PASSWORD=secure_password_here
# REDIS_PASSWORD=redis_password_here
# JWT_SECRET_KEY=jwt_secret_key_here
# LOG_LEVEL=INFO
# GRAFANA_PASSWORD=grafana_admin_password
# JUPYTER_TOKEN=jupyter_access_token