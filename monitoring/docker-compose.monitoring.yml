version: '3.8'

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: grandmodel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9090'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9090"

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:9.4.3
    container_name: grandmodel-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager - Alert Routing
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: grandmodel-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
    depends_on:
      - prometheus
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: grandmodel-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # Blackbox Exporter - Endpoint Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.23.0
    container_name: grandmodel-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - ./config/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
    networks:
      - monitoring

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.48.0
    container_name: grandmodel-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
    depends_on:
      - redis
    networks:
      - monitoring

  # Postgres Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: grandmodel-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://grandmodel:password@postgres:5432/grandmodel?sslmode=disable
    depends_on:
      - postgres
    networks:
      - monitoring

  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    container_name: grandmodel-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana - Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.2
    container_name: grandmodel-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.2
    container_name: grandmodel-logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    environment:
      - xpack.monitoring.enabled=false
    depends_on:
      - elasticsearch
    networks:
      - monitoring

  # Fluentd - Log Collection
  fluentd:
    image: fluent/fluentd:v1.16.0-1.0
    container_name: grandmodel-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./config/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - fluentd_logs:/var/log/fluentd
    depends_on:
      - elasticsearch
    networks:
      - monitoring

  # Redis - Cache and Message Queue
  redis:
    image: redis:7.0-alpine
    container_name: grandmodel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Database
  postgres:
    image: postgres:15-alpine
    container_name: grandmodel-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=grandmodel
      - POSTGRES_USER=grandmodel
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grandmodel -d grandmodel"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.42.0
    container_name: grandmodel-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring

  # Cadvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: grandmodel-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - monitoring

  # Portainer - Container Management
  portainer:
    image: portainer/portainer-ce:2.17.1
    container_name: grandmodel-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - monitoring

  # Nginx - Reverse Proxy
  nginx:
    image: nginx:1.23-alpine
    container_name: grandmodel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - grafana
      - prometheus
      - kibana
    networks:
      - monitoring

  # GrandModel Health Check Service
  health-check:
    build:
      context: .
      dockerfile: Dockerfile.health-check
    container_name: grandmodel-health-check
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - ./monitoring/health_check_system.py:/app/health_check_system.py
      - ./monitoring/centralized_logging.py:/app/centralized_logging.py
      - ./config/health_check_config.json:/app/config.json
    environment:
      - PYTHONPATH=/app
      - HEALTH_CHECK_INTERVAL=30
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - monitoring

  # GrandModel Alerting Service
  alerting:
    build:
      context: .
      dockerfile: Dockerfile.alerting
    container_name: grandmodel-alerting
    restart: unless-stopped
    ports:
      - "8002:8002"
    volumes:
      - ./monitoring/alerting_system.py:/app/alerting_system.py
      - ./monitoring/pagerduty_integration.py:/app/pagerduty_integration.py
      - ./config/alerting_config.json:/app/config.json
    environment:
      - PYTHONPATH=/app
      - PAGERDUTY_API_TOKEN=${PAGERDUTY_API_TOKEN}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    depends_on:
      - redis
      - prometheus
      - alertmanager
    networks:
      - monitoring

  # GrandModel Monitoring Dashboard
  monitoring-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.monitoring-dashboard
    container_name: grandmodel-monitoring-dashboard
    restart: unless-stopped
    ports:
      - "8003:8003"
    volumes:
      - ./monitoring/real_time_dashboard.py:/app/real_time_dashboard.py
      - ./monitoring/centralized_logging.py:/app/centralized_logging.py
      - ./config/dashboard_config.json:/app/config.json
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - redis
      - elasticsearch
      - prometheus
    networks:
      - monitoring

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  elasticsearch_data:
  redis_data:
  postgres_data:
  portainer_data:
  fluentd_logs:

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16