[tool:pytest]
# Local Development pytest configuration for GrandModel
# Optimized for debugging and comprehensive testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Local development optimizations
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --asyncio-mode=auto
    --durations=20
    --durations-min=0.05
    --maxfail=5
    --timeout=300
    --timeout-method=thread
    --disable-warnings
    --ignore=venv
    --ignore=.venv
    --ignore=build
    --ignore=dist
    --ignore=.git
    --ignore=__pycache__
    --ignore=.pytest_cache
    --lf
    --ff
    
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-branch
    --cov-fail-under=70
    
# Parallel execution (local development)
    -n 2
    --dist=loadscope
    --maxprocesses=2

# Comprehensive test markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (system components)
    performance: Performance and benchmark tests
    slow: Slow running tests
    strategic: Strategic MARL system tests
    tactical: Tactical MARL system tests
    risk: Risk management system tests
    security: Security and adversarial tests
    xai: XAI explainability tests
    consensus: Consensus tests
    matrix: Matrix assembler tests
    indicators: Technical indicator tests
    intelligence: Intelligence system tests
    smoke: Smoke tests
    regression: Regression tests
    acceptance: Acceptance tests
    local: Local development tests
    memory_intensive: Memory intensive tests
    cpu_intensive: CPU intensive tests
    requires_docker: Docker required tests
    requires_gpu: GPU required tests
    requires_data: External data required tests
    requires_redis: Redis required tests
    requires_network: Network required tests
    
# Local development configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Detailed logging for debugging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Performance benchmarking
benchmark_min_time = 0.001
benchmark_max_time = 2.0
benchmark_min_rounds = 3
benchmark_warmup = true
benchmark_warmup_iterations = 1
benchmark_sort = mean
benchmark_group_by = group

# Memory monitoring
memory_profiler = true
memory_profiler_backend = tracemalloc

# Lenient warnings for local development
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:torch.*
    ignore::UserWarning:tensorflow.*
    ignore::FutureWarning:pandas.*
    ignore::FutureWarning:numpy.*
    ignore::ResourceWarning
    ignore::RuntimeWarning:numpy.*

# Test reliability
xfail_strict = false  # More lenient for local development

# Collection configuration
collect_ignore = 
    setup.py
    venv
    .venv
    build
    dist
    .git
    __pycache__
    .pytest_cache
    colab/notebooks/archive_backup
    adversarial_tests/extreme_data
    adversarial_tests/malicious_configs
    models/artifacts
    logs
    htmlcov

# Local development settings
session_timeout = 3600  # 1 hour for local development
test_timeout = 600      # 10 minutes per test for debugging
cache_dir = .pytest_cache
cache_clear_on_failure = false

# Test reporting
junit_family = xunit2
junit_suite_name = GrandModel-Local
junit_duration_report = total
junit_log_passing_tests = true

# Resource management
max_worker_restart = 5
max_slave_restart = 5

# Test execution order for local development
test_order = 
    unit
    integration
    performance
    slow